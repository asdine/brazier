// Code generated by protoc-gen-go.
// source: types.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Empty response.
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// The request message containing the path of a bucket or item.
type Selector struct {
	Path      string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Recursive bool   `protobuf:"varint,2,opt,name=recursive" json:"recursive,omitempty"`
}

func (m *Selector) Reset()                    { *m = Selector{} }
func (m *Selector) String() string            { return proto1.CompactTextString(m) }
func (*Selector) ProtoMessage()               {}
func (*Selector) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// Bucket to be created at the given path.
type NewBucket struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *NewBucket) Reset()                    { *m = NewBucket{} }
func (m *NewBucket) String() string            { return proto1.CompactTextString(m) }
func (*NewBucket) ProtoMessage()               {}
func (*NewBucket) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// Item sent to be saved in the bucket.
type NewItem struct {
	Path  string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *NewItem) Reset()                    { *m = NewItem{} }
func (m *NewItem) String() string            { return proto1.CompactTextString(m) }
func (*NewItem) ProtoMessage()               {}
func (*NewItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

// Item informations.
type Item struct {
	Key      string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value    []byte  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Children []*Item `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto1.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Item) GetChildren() []*Item {
	if m != nil {
		return m.Children
	}
	return nil
}

// List of items.
type Items struct {
	Items []*Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Items) Reset()                    { *m = Items{} }
func (m *Items) String() string            { return proto1.CompactTextString(m) }
func (*Items) ProtoMessage()               {}
func (*Items) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *Items) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*Selector)(nil), "proto.Selector")
	proto1.RegisterType((*NewBucket)(nil), "proto.NewBucket")
	proto1.RegisterType((*NewItem)(nil), "proto.NewItem")
	proto1.RegisterType((*Item)(nil), "proto.Item")
	proto1.RegisterType((*Items)(nil), "proto.Items")
}

func init() { proto1.RegisterFile("types.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x8f, 0x3f, 0x4f, 0x85, 0x30,
	0x14, 0xc5, 0x53, 0x79, 0x15, 0xb8, 0x38, 0x98, 0xc6, 0xa1, 0x83, 0x89, 0xd8, 0x45, 0xe2, 0xc0,
	0x20, 0xab, 0x93, 0x89, 0x83, 0x0b, 0x43, 0x1d, 0x9c, 0xb1, 0xde, 0x04, 0x02, 0x48, 0x53, 0x0a,
	0x84, 0x6f, 0x6f, 0xda, 0x1a, 0x1d, 0x1e, 0x53, 0x4f, 0xcf, 0x9f, 0x5f, 0x72, 0x21, 0xb3, 0xbb,
	0xc6, 0xb9, 0xd4, 0x66, 0xb2, 0x13, 0xa3, 0xfe, 0x11, 0x31, 0xd0, 0xd7, 0x51, 0xdb, 0x5d, 0x3c,
	0x43, 0xf2, 0x8e, 0x03, 0x2a, 0x3b, 0x19, 0xc6, 0xe0, 0xa4, 0x1b, 0xdb, 0x72, 0x92, 0x93, 0x22,
	0x95, 0x5e, 0xb3, 0x5b, 0x48, 0x0d, 0xaa, 0xc5, 0xcc, 0xdd, 0x8a, 0xfc, 0x22, 0x27, 0x45, 0x22,
	0xff, 0x0d, 0x71, 0x07, 0x69, 0x8d, 0xdb, 0xcb, 0xa2, 0x7a, 0xb4, 0x47, 0x73, 0x51, 0x41, 0x5c,
	0xe3, 0xf6, 0x66, 0x71, 0x3c, 0xa4, 0xdf, 0x00, 0x5d, 0x9b, 0x61, 0x09, 0xe4, 0x2b, 0x19, 0x3e,
	0xe2, 0x03, 0x4e, 0x7e, 0x71, 0x0d, 0x51, 0x8f, 0xfb, 0xef, 0xc0, 0xc9, 0xe3, 0x3e, 0x7b, 0x80,
	0x44, 0xb5, 0xdd, 0xf0, 0x65, 0xf0, 0x9b, 0x47, 0x79, 0x54, 0x64, 0x4f, 0x59, 0xb8, 0xb6, 0x74,
	0x18, 0xf9, 0x17, 0x8a, 0x47, 0xa0, 0xce, 0x99, 0xd9, 0x3d, 0xd0, 0xce, 0x09, 0x4e, 0xce, 0xeb,
	0x21, 0xf9, 0xbc, 0xf4, 0x56, 0xf5, 0x13, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x62, 0x0a, 0x9b, 0x3e,
	0x01, 0x00, 0x00,
}
